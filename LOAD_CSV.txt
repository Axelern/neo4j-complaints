CREATE CONSTRAINT ON (c:Complaint) ASSERT c.id IS UNIQUE;
CREATE CONSTRAINT ON (c:Company) ASSERT c.name IS UNIQUE;
CREATE CONSTRAINT ON (r:Response) ASSERT r.name IS UNIQUE;


USING PERIODIC COMMIT
LOAD CSV WITH HEADERS 
FROM 'file:///Users/nicole/consumer_complaints_310k.csv' AS line

CREATE (complaint:Complaint { id: TOINT(line.ComplaintID) })
SET complaint.date = line.DateReceived,
    complaint.year = TOINT(SPLIT(line.DateReceived, '-')[0]),
    complaint.month = TOINT(SPLIT(line.DateReceived, '-')[1]),
    complaint.day = TOINT(SPLIT(line.DateReceived, '-')[2])

MERGE (company:Company { name: UPPER(line.Company) })
MERGE (response:Response { name: UPPER(line.CompanyResponse) })

CREATE (complaint)-[:AGAINST]->(company)
CREATE (response)-[r:TO]->(complaint)

SET r.timely = CASE line.TimelyResponse WHEN 'Yes' THEN true ELSE false END,
    r.disputed = CASE line.ConsumerDisputed WHEN 'Yes' THEN true ELSE false END
;


CREATE CONSTRAINT ON (p:Product) ASSERT p.name IS UNIQUE;
CREATE CONSTRAINT ON (i:Issue) ASSERT i.name IS UNIQUE;


USING PERIODIC COMMIT
LOAD CSV WITH HEADERS 
FROM 'file:///Users/nicole/consumer_complaints_310k.csv' AS line

MATCH (complaint:Complaint { id: TOINT(line.ComplaintID) })

MERGE (product:Product { name: UPPER(line.Product) })
MERGE (issue:Issue {name: UPPER(line.Issue) })

CREATE (complaint)-[:ABOUT]->(product)
CREATE (complaint)-[:WITH]->(issue)
;


CREATE CONSTRAINT ON (s:SubProduct) ASSERT s.name IS UNIQUE;
CREATE CONSTRAINT ON (s:SubIssue) ASSERT s.name IS UNIQUE;


USING PERIODIC COMMIT
LOAD CSV WITH HEADERS 
FROM 'file:///Users/nicole/consumer_complaints_310k.csv' AS line

MATCH (complaint:Complaint { id: TOINT(line.ComplaintID) })
MATCH (complaint)-[:ABOUT]->(product:Product)
MATCH (complaint)-[:WITH]->(issue:Issue)

FOREACH (x IN (CASE WHEN line.SubProduct = '' THEN [] ELSE ['do something'] END) |
	MERGE (subproduct:SubProduct { name: UPPER(line.SubProduct) })
	MERGE (subproduct)-[:IN_CATEGORY]->(product)
	CREATE (complaint)-[:ABOUT]->(subproduct)
)

FOREACH (x IN (CASE WHEN line.SubIssue = '' THEN [] ELSE ['do something'] END) |
	MERGE (subissue:SubIssue { name: UPPER(line.SubIssue) })
	MERGE (subissue)-[:IN_CATEGORY]->(issue)
	CREATE (complaint)-[:WITH]->(subissue)
)
;